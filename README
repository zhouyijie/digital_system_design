simple_encoder: The function of this circuit convert data from a 16-bit format to a 4-bit format with another 1 bit used for error detection. 
There are 16 valid inputs which represents the numbers 0-15, each of the data lines represent one of this 16 numeric values. 
For example if the data line representing the number 12 is active (has value 1), the 4 bit output is going to be “1100” and the error line is low. 
The error line is activated, has a value of 1, if all the input lines are 0 (i.e “0000000000000000”) else it has a value of 0. 
If we have more than one inputs, the 4 bit output will return the lowest index.

keyboard_encoder: The function of the keyboard encoder is to take the value of the 64 bit input and map it onto
a 7 bit output. ​ This is done via a 64:6 encoder that the keyboard encoder uses as its
component.
First we know that only one bit can be high, have a value of 1, in our input. Hence we can
have 64 distinct valid values for our input. The 64 values represent the numeric values 0 to
63 and that can be represented by 6 bits. Therefore we take the 64 inputs pass it into our
64:6 encoder and and get a 6 bit output. Now we have to convert this 6 bit intermediary
output to a 7 bit output. From the given 7 bit ascii table in the slides (Fig 1), we had to map
the 64 possible output values to the 64 keys represented by columns 2,3,4 and 5 and rows 0
-15 (F). To do this, we reserve the first 3 bits for the column number and the last 4 bits for
the row number. For example: a 6 bit input of ‘000000’ represents column 2 row 0, therefore
the output should be ‘0100000’, where 010 represents column 2 and ‘0000’ represents row
0. On further inspection we can see that the possible values for the first 3 bits are ‘010’,
’011’, ‘100’ and ‘101’ which are columns 2,3,4 and 5 respectively. Hence if the msb is ‘0’, we
set the leftmost 2 bits to ‘01’ else if msb is ‘1’ we set it to ‘10’ and then concatenate the
remaining 5 bits to the end of it. This completes our code for the keyboard encoder.

breakout game: When the ball hits the border walls (top, right or left), the ball is reflected back
successfully
When the ball hits the paddle, the ball is reflected back successfully
Two buttons on the ALTERA D1 board is used to control the movement of the
paddle.
A life is successfully decremented when the ball goes beyond the paddle.
A grid of 5x12 blocks are generated at the start of the game
When the ball hits the block, the block is successfully broken
When the ball hits a block, the ball is successfully reflected back
When we lose a life, the ball and the paddle is reset to the center.
The game stops when all lives are lost
A line of text at the bottom successfully shows the score, lives and level.
